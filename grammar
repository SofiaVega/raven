%import common.ESCAPED_STRING   -> STRING
%import common.WS
%ignore WS

IF: "if"
ELSE: "else"
VAR: "var"
INT: "int"
FLOAT: "float"
HUV: "habiaUnaVez"
PRINT: "->"
SALTO: "\n"

ICOR: "{"
FCOR: "}"
IPAR: "("
FPAR: ")"
NOT_EQUAL: "<>"

ID: /[a-zA-Z_][a-zA-Z_0-9]*/
INUM: /^[-+]?[0-9]+$/
FNUM: /[0-9]*\.?[0-9]+((E|e)(\+|-)?[0-9]+)?/

start: programa
programa: HUV ID SALTO importarloop "titulo" "=" ID SALTO varsloop mecanicaloop capituloloop
importarloop: importar | importar importarloop
varsloop: vars | vars varsloop
mecanicaloop: mecanica | mecanica mecanicaloop
capituloloop: capitulo | capitulo capituloloop

vars: tipo vars3 vars2 SALTO
vars2: , vars3 vars2 |
vars3: ID | ID = expresion

importar: "importar" STRING "como" ID

mecanica: "mecanica" tipo ID IPAR mecanica2 FPAR ICOR SALTO ESTATUTO SALTO mecanica4 mecanica5 FCOR
mecanica2: tipo ID mecanica3 |
mecanica3: , tipo ID mecanica3 | 
mecanica4: ESTATUTO SALTO mecanica4 |
mecanica5: "regresa" varcte | 

capitulo: "capitulo" ID IPAR mecanica2 FPAR ICOR SALTO "titulo" "=" STRING SALTO ESTATUTO SALTO mecanica4 FCOR

expresion: exp | exp g
g: exp | "<" exp | ">" exp | NOT_EQUAL exp

exp: termino | e
e: "+" exp | "-" exp

termino: factor | f
f: "*" termino | "/" termino
factor: ICOR expresion FCOR | varcte | "+" varcte | "-" varcte
varcte: ID | INUM | FNUM

