OPCIONES: "opciones"
%import common.ESCAPED_STRING   -> STRING
%import common.WS
%ignore WS

IF: "si"
ELSE: "sino"
HUV: "habiaUnaVez"
PRINT: "->"
SALTO: /\n+/

NUMTIPO: "num"
ENUNCIADO: "enunciado"
BOOL: "bool"
CAPITULO: "capitulo"
MECANICA: "mecanica"
TITULO: "titulo"
REGRESA: "regresa"
VACIO: "vacia"
WHILE: "mientras"
POR: "por"
EN: "en"

MULT: /\*/
SUMA: /\+/
DIV: /\//
RESTA: /\-/

COMENTARIO: "//" /[^\n]*/ SALTO
%ignore COMENTARIO


ICOR: "{"
FCOR: "}"
IPAR: /\(/
FPAR: ")"
NOT_EQUAL: "<>"
GREATER_THEN: ">"
LESSER_THEN: "<"
IGUAL_A: "=="
IGUAL: "="
IMPORTAR: "importar"
COMO: "como"

ID: /[a-zA-Z_][a-zA-Z_0-9]*/
NUM: /\d+/

start: programa
programa: huv_inicio  SALTO importarloop titulo_asig np_asig_quad SALTO varsloop mecanicaloop np_cap capituloloop indice np_fin
huv_inicio: HUV ID
titulo_asig: TITULO IGUAL STRING
np_fin: 

importarloop: importar | importarloop importar|
varsloop: vars | varsloop vars |
mecanicaloop: mecanica | mecanicaloop  mecanica |
capituloloop: capitulo | capituloloop capitulo 

importar: IMPORTAR STRING COMO ID

vars: tipo vars3 np_add_vars vars2 SALTO -> np_vars
        | arreglo
np_add_vars:
vars2: "," vars3 vars2 |
vars3: ID | ID IGUAL expresion np_asig_quad -> np_asig
np_asig:
np_asig_quad:

mecanica: MECANICA np_funciones_1 IPAR mecanica2 FPAR ICOR SALTO vars_mecanica_loop cambiar_quad_pointer mecanica4 mecanica5 FCOR fin_mecanica
np_funciones_1: tipo ID
mecanica2: tipo ID mecanica3 |
mecanica3: "," tipo ID mecanica3 | 
cambiar_quad_pointer: 
mecanica4: estatuto SALTO mecanica4 |
mecanica5: REGRESA exp np_mecanica_5 | 
fin_mecanica: 

vars_mecanica_loop: vars | vars_mecanica_loop vars |


opciones: OPCIONES ":" "[" opciones2 "]"
opciones2: opcion opciones3
opciones3: ";" opcion opciones3 | 
opcion: STRING "," ID IPAR estatuto2 FPAR











capitulo: CAPITULO ID IPAR mecanica2 FPAR ICOR SALTO titulo_asig np_asig_quad SALTO estatuto SALTO mecanica4 FCOR
np_cap: 

indice: INDICE IPAR FPAR ICOR 

expresion: exp | exp expresion_mayor
expresion_mayor: exp | LESSER_THEN exp cuadruplo_expresion | GREATER_THEN exp cuadruplo_expresion | NOT_EQUAL exp cuadruplo_expresion | IGUAL_A exp cuadruplo_expresion
cuadruplo_expresion: 


exp: termino  | termino exp_suma
exp_suma: SUMA exp cuadruplo_suma | RESTA exp cuadruplo_suma
cuadruplo_suma:

termino: factor | factor termino_mult
termino_mult: MULT termino cuadruplo_mult_div
        | DIV termino cuadruplo_mult_div
cuadruplo_mult_div: 
        

factor: IPAR expresion FPAR | varcte | SUMA varcte | RESTA varcte
varcte:  ID arr_o_no -> guardar_id
        | NUM -> guardar_num
        | STRING -> guardar_string
        | BOOL -> guardar_bool
        | llamada_funcion

arr_o_no: accarr accarr2 -> np_acc_arr_1
        | 
accarr2: accarr np_acc_arr_4 accarr2 | np_acc_arr_5
accarr: "[" np_acc_arr_2 exp np_acc_arr_3 "]"
np_acc_arr_2:
np_acc_arr_3:
np_acc_arr_4:
np_acc_arr_5:

estatuto: asignacion 
                | condicion 
                | ciclo_while 
                | ciclo_por 
                | escritura 
                | llamada_funcion
                | opciones
llamada_funcion: ID IPAR np_llamada_funcion_2 estatuto2 np_llamada_funcion_5 FPAR np_llamada_funcion_6 -> np_llamada_funcion_1
np_llamada_funcion_2: 
np_llamada_funcion_5:
np_llamada_funcion_4:
np_llamada_funcion_3:
np_llamada_funcion_6:
estatuto2: expresion np_llamada_funcion_3 estatuto3 np_llamada_funcion_4 |
estatuto3: "," np_llamada_funcion_4 expresion np_llamada_funcion_3 estatuto3 |

condicion: IF IPAR expresion FPAR np_if ICOR estatuto condicion2 FCOR sino np_if_2
np_if: 
np_if_2:
sino: ELSE np_if_3 ICOR estatuto condicion2 FCOR | 
condicion2: estatuto condicion2 |
np_if_3: 


asignacion: ID arr_o_no IGUAL expresion np_asig_quad -> np_asig


escritura: PRINT STRING -> print_string
        | PRINT expresion np_print_expresion -> print_expresion
        | PRINT ID "[" NUM "]" SALTO -> print_import
np_print_expresion: 

arreglo: tipo arr arreglo3
arr: ID "[" NUM np_arr_5 "]" arreglo2 np_arr_7
arreglo2: "[" NUM np_arr_5 "]" | 
np_arr_5: 
np_arr_6:
np_arr_7:
arreglo3: "," np_arr_6 arr arreglo3 | 
val: ID | NUM | NUM | STRING

tipo: NUMTIPO | ENUNCIADO | BOOL | VACIO

ciclo_por: POR ID EN ID ICOR estatuto ciclo_por2 FCOR
ciclo_por2: estatuto ciclo_por2 | 

ciclo_while: WHILE np_while_1 IPAR expresion FPAR np_while_2 ICOR estatuto ciclo_while2 FCOR np_while_3
ciclo_while2: estatuto ciclo_while2 | 
np_while_1: 
np_while_2: 
np_while_3: 
