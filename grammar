%import common.ESCAPED_STRING   -> STRING
%import common.WS
%ignore WS

IF: "si"
ELSE: "si no"
HUV: "habiaUnaVez"
PRINT: "->"
SALTO: "\n"

NUM: "num"
ENUNCIADO: "enunciado"
BOOL: "bool"
ARREGLO: "arreglo"
CAPITULO: "capitulo"
MECANICA: "mecanica"
TITULO: "titulo"
REGRESA: "regresa"

COMENTARIO: "//" /[^\n]*/ SALTO
%ignore COMENTARIO


ICOR: "{"
FCOR: "}"
IPAR: "("
FPAR: ")"
NOT_EQUAL: "<>"
IGUAL: "="
IMPORTAR: "importar"
COMO: "como"

ID: /[a-zA-Z_][a-zA-Z_0-9]*/
INUM: /^[-+]?[0-9]+$/
FNUM: /[0-9]*\.?[0-9]+((E|e)(\+|-)?[0-9]+)?/

start: programa
programa: HUV ID SALTO importarloop TITULO IGUAL ID SALTO varsloop mecanicaloop capituloloop
importarloop: importar | importar importarloop
varsloop: vars | vars varsloop
mecanicaloop: mecanica | mecanica mecanicaloop
capituloloop: capitulo | capitulo capituloloop

vars: tipo vars3 vars2 SALTO
vars2: , vars3 vars2 |
vars3: ID | ID = expresion

importar: IMPORTAR STRING COMO ID

mecanica: MECANICA tipo ID IPAR mecanica2 FPAR ICOR SALTO ESTATUTO SALTO mecanica4 mecanica5 FCOR
mecanica2: tipo ID mecanica3 |
mecanica3: , tipo ID mecanica3 | 
mecanica4: estatuto SALTO mecanica4 |
mecanica5: REGRESA varcte | 

capitulo: CAPITULO ID IPAR mecanica2 FPAR ICOR SALTO TITULO IGUAL STRING SALTO ESTATUTO SALTO mecanica4 FCOR

expresion: exp | exp g
g: exp | "<" exp | ">" exp | NOT_EQUAL exp

exp: termino | e
e: "+" exp | "-" exp

termino: factor | f
f: "*" termino | "/" termino
factor: ICOR expresion FCOR | varcte | "+" varcte | "-" varcte
varcte: ID | INUM | FNUM

estatuto: asignacion | condicion | escritura | idMecanica IPAR estatuto2 FPAR
estatuto2: ID estatuto3 |
estatuto3: "," ID estatuto3 |

condicion: IF IPAR expresion FPAR ICOR estatuto SALTO mecanica4 FCOR sino
sino: ELSE ICOR estatuto SALTO mecanica4 FCOR | 

asignacion: ID "=" EXPRESION

escritura: PRINT STRING SALTO | PRINT ID "[" INUM "]" SALTO

arreglo: ARREGLO tipo ID "=" "[" arreglo2 "]"
arreglo2: val arreglo3 |
arreglo3: , val arreglo 3 |
val: ID | INUM | FNUM | STRING

tipo: NUM | ENUNCIADO | BOOL | ARREGLO
